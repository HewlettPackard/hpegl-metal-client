// (C) Copyright 2021-2024 Hewlett Packard Enterprise Development LP

// Code generated by MockGen. DO NOT EDIT.
// Source: interface_hosts.go

// Package mockquakeclient is a generated GoMock package.
package mockquakeclient

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/hewlettpackard/hpegl-metal-client/v1/pkg/client"
)

// MockHostsAPI is a mock of HostsAPI interface.
type MockHostsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockHostsAPIMockRecorder
}

// MockHostsAPIMockRecorder is the mock recorder for MockHostsAPI.
type MockHostsAPIMockRecorder struct {
	mock *MockHostsAPI
}

// NewMockHostsAPI creates a new mock instance.
func NewMockHostsAPI(ctrl *gomock.Controller) *MockHostsAPI {
	mock := &MockHostsAPI{ctrl: ctrl}
	mock.recorder = &MockHostsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostsAPI) EXPECT() *MockHostsAPIMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockHostsAPI) Add(ctx context.Context, newHost client.NewHost, localVarOptionals *client.HostsApiAddOpts) (client.Host, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, newHost, localVarOptionals)
	ret0, _ := ret[0].(client.Host)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Add indicates an expected call of Add.
func (mr *MockHostsAPIMockRecorder) Add(ctx, newHost, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockHostsAPI)(nil).Add), ctx, newHost, localVarOptionals)
}

// BootHDD mocks base method.
func (m *MockHostsAPI) BootHDD(ctx context.Context, hostId string, localVarOptionals *client.HostsApiBootHDDOpts) (client.Host, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootHDD", ctx, hostId, localVarOptionals)
	ret0, _ := ret[0].(client.Host)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BootHDD indicates an expected call of BootHDD.
func (mr *MockHostsAPIMockRecorder) BootHDD(ctx, hostId, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootHDD", reflect.TypeOf((*MockHostsAPI)(nil).BootHDD), ctx, hostId, localVarOptionals)
}

// BootPXE mocks base method.
func (m *MockHostsAPI) BootPXE(ctx context.Context, hostId string, localVarOptionals *client.HostsApiBootPXEOpts) (client.Host, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootPXE", ctx, hostId, localVarOptionals)
	ret0, _ := ret[0].(client.Host)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BootPXE indicates an expected call of BootPXE.
func (mr *MockHostsAPIMockRecorder) BootPXE(ctx, hostId, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootPXE", reflect.TypeOf((*MockHostsAPI)(nil).BootPXE), ctx, hostId, localVarOptionals)
}

// Delete mocks base method.
func (m *MockHostsAPI) Delete(ctx context.Context, hostId string, localVarOptionals *client.HostsApiDeleteOpts) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, hostId, localVarOptionals)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockHostsAPIMockRecorder) Delete(ctx, hostId, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHostsAPI)(nil).Delete), ctx, hostId, localVarOptionals)
}

// GetByID mocks base method.
func (m *MockHostsAPI) GetByID(ctx context.Context, hostId string, localVarOptionals *client.HostsApiGetByIDOpts) (client.Host, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, hostId, localVarOptionals)
	ret0, _ := ret[0].(client.Host)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockHostsAPIMockRecorder) GetByID(ctx, hostId, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockHostsAPI)(nil).GetByID), ctx, hostId, localVarOptionals)
}

// List mocks base method.
func (m *MockHostsAPI) List(ctx context.Context, localVarOptionals *client.HostsApiListOpts) ([]client.Host, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, localVarOptionals)
	ret0, _ := ret[0].([]client.Host)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockHostsAPIMockRecorder) List(ctx, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockHostsAPI)(nil).List), ctx, localVarOptionals)
}

// Maintenance mocks base method.
func (m *MockHostsAPI) Maintenance(ctx context.Context, hostId string, localVarOptionals *client.HostsApiMaintenanceOpts) (client.Host, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Maintenance", ctx, hostId, localVarOptionals)
	ret0, _ := ret[0].(client.Host)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Maintenance indicates an expected call of Maintenance.
func (mr *MockHostsAPIMockRecorder) Maintenance(ctx, hostId, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Maintenance", reflect.TypeOf((*MockHostsAPI)(nil).Maintenance), ctx, hostId, localVarOptionals)
}

// PowerOff mocks base method.
func (m *MockHostsAPI) PowerOff(ctx context.Context, hostId string, localVarOptionals *client.HostsApiPowerOffOpts) (client.Host, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOff", ctx, hostId, localVarOptionals)
	ret0, _ := ret[0].(client.Host)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PowerOff indicates an expected call of PowerOff.
func (mr *MockHostsAPIMockRecorder) PowerOff(ctx, hostId, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOff", reflect.TypeOf((*MockHostsAPI)(nil).PowerOff), ctx, hostId, localVarOptionals)
}

// PowerOn mocks base method.
func (m *MockHostsAPI) PowerOn(ctx context.Context, hostId string, localVarOptionals *client.HostsApiPowerOnOpts) (client.Host, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOn", ctx, hostId, localVarOptionals)
	ret0, _ := ret[0].(client.Host)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PowerOn indicates an expected call of PowerOn.
func (mr *MockHostsAPIMockRecorder) PowerOn(ctx, hostId, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOn", reflect.TypeOf((*MockHostsAPI)(nil).PowerOn), ctx, hostId, localVarOptionals)
}

// PowerReset mocks base method.
func (m *MockHostsAPI) PowerReset(ctx context.Context, hostId string, localVarOptionals *client.HostsApiPowerResetOpts) (client.Host, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerReset", ctx, hostId, localVarOptionals)
	ret0, _ := ret[0].(client.Host)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PowerReset indicates an expected call of PowerReset.
func (mr *MockHostsAPIMockRecorder) PowerReset(ctx, hostId, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerReset", reflect.TypeOf((*MockHostsAPI)(nil).PowerReset), ctx, hostId, localVarOptionals)
}

// Reimage mocks base method.
func (m *MockHostsAPI) Reimage(ctx context.Context, hostId string, localVarOptionals *client.HostsApiReimageOpts) (client.Host, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reimage", ctx, hostId, localVarOptionals)
	ret0, _ := ret[0].(client.Host)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Reimage indicates an expected call of Reimage.
func (mr *MockHostsAPIMockRecorder) Reimage(ctx, hostId, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reimage", reflect.TypeOf((*MockHostsAPI)(nil).Reimage), ctx, hostId, localVarOptionals)
}

// Replace mocks base method.
func (m *MockHostsAPI) Replace(ctx context.Context, hostId string, localVarOptionals *client.HostsApiReplaceOpts) (client.Host, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", ctx, hostId, localVarOptionals)
	ret0, _ := ret[0].(client.Host)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Replace indicates an expected call of Replace.
func (mr *MockHostsAPIMockRecorder) Replace(ctx, hostId, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockHostsAPI)(nil).Replace), ctx, hostId, localVarOptionals)
}

// Update mocks base method.
func (m *MockHostsAPI) Update(ctx context.Context, hostId string, updateHost client.UpdateHost, localVarOptionals *client.HostsApiUpdateOpts) (client.Host, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, hostId, updateHost, localVarOptionals)
	ret0, _ := ret[0].(client.Host)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockHostsAPIMockRecorder) Update(ctx, hostId, updateHost, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHostsAPI)(nil).Update), ctx, hostId, updateHost, localVarOptionals)
}
