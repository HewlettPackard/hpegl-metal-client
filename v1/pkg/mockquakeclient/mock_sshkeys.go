// (C) Copyright 2021-2024 Hewlett Packard Enterprise Development LP

// Code generated by MockGen. DO NOT EDIT.
// Source: interface_sshkeys.go

// Package mockquakeclient is a generated GoMock package.
package mockquakeclient

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/hewlettpackard/hpegl-metal-client/v1/pkg/client"
)

// MockSshkeysAPI is a mock of SshkeysAPI interface.
type MockSshkeysAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSshkeysAPIMockRecorder
}

// MockSshkeysAPIMockRecorder is the mock recorder for MockSshkeysAPI.
type MockSshkeysAPIMockRecorder struct {
	mock *MockSshkeysAPI
}

// NewMockSshkeysAPI creates a new mock instance.
func NewMockSshkeysAPI(ctrl *gomock.Controller) *MockSshkeysAPI {
	mock := &MockSshkeysAPI{ctrl: ctrl}
	mock.recorder = &MockSshkeysAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSshkeysAPI) EXPECT() *MockSshkeysAPIMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSshkeysAPI) Add(ctx context.Context, newSshKey client.NewSshKey, localVarOptionals *client.SshkeysApiAddOpts) (client.SshKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, newSshKey, localVarOptionals)
	ret0, _ := ret[0].(client.SshKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Add indicates an expected call of Add.
func (mr *MockSshkeysAPIMockRecorder) Add(ctx, newSshKey, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSshkeysAPI)(nil).Add), ctx, newSshKey, localVarOptionals)
}

// Delete mocks base method.
func (m *MockSshkeysAPI) Delete(ctx context.Context, sshkeyId string, localVarOptionals *client.SshkeysApiDeleteOpts) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, sshkeyId, localVarOptionals)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSshkeysAPIMockRecorder) Delete(ctx, sshkeyId, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSshkeysAPI)(nil).Delete), ctx, sshkeyId, localVarOptionals)
}

// GetByID mocks base method.
func (m *MockSshkeysAPI) GetByID(ctx context.Context, sshkeyId string, localVarOptionals *client.SshkeysApiGetByIDOpts) (client.SshKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, sshkeyId, localVarOptionals)
	ret0, _ := ret[0].(client.SshKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSshkeysAPIMockRecorder) GetByID(ctx, sshkeyId, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSshkeysAPI)(nil).GetByID), ctx, sshkeyId, localVarOptionals)
}

// List mocks base method.
func (m *MockSshkeysAPI) List(ctx context.Context, localVarOptionals *client.SshkeysApiListOpts) ([]client.SshKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, localVarOptionals)
	ret0, _ := ret[0].([]client.SshKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockSshkeysAPIMockRecorder) List(ctx, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSshkeysAPI)(nil).List), ctx, localVarOptionals)
}

// Update mocks base method.
func (m *MockSshkeysAPI) Update(ctx context.Context, sshkeyId string, updateSshKey client.UpdateSshKey, localVarOptionals *client.SshkeysApiUpdateOpts) (client.SshKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, sshkeyId, updateSshKey, localVarOptionals)
	ret0, _ := ret[0].(client.SshKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockSshkeysAPIMockRecorder) Update(ctx, sshkeyId, updateSshKey, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSshkeysAPI)(nil).Update), ctx, sshkeyId, updateSshKey, localVarOptionals)
}
